// vitest.config.js
import { fileURLToPath as fileURLToPath2 } from "node:url";
import { mergeConfig } from "file:///Users/lmfg/XN-SUI/roar/roar-dashboard/node_modules/vite/dist/node/index.js";
import { defineConfig as defineConfig2, coverageConfigDefaults } from "file:///Users/lmfg/XN-SUI/roar/roar-dashboard/node_modules/vitest/dist/config.js";

// vite.config.js
import { sentryVitePlugin } from "file:///Users/lmfg/XN-SUI/roar/roar-dashboard/node_modules/@sentry/vite-plugin/dist/esm/index.mjs";
import { defineConfig } from "file:///Users/lmfg/XN-SUI/roar/roar-dashboard/node_modules/vite/dist/node/index.js";
import { nodePolyfills } from "file:///Users/lmfg/XN-SUI/roar/roar-dashboard/node_modules/vite-plugin-node-polyfills/dist/index.js";
import Vue from "file:///Users/lmfg/XN-SUI/roar/roar-dashboard/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import UnheadVite from "file:///Users/lmfg/XN-SUI/roar/roar-dashboard/node_modules/@unhead/addons/dist/vite.mjs";
import { config } from "file:///Users/lmfg/XN-SUI/roar/roar-dashboard/node_modules/@dotenvx/dotenvx/src/lib/main.js";
import { fileURLToPath, URL as URL2 } from "url";
import path from "path";
import fs from "fs";
var __vite_injected_original_dirname = "/Users/lmfg/XN-SUI/roar/roar-dashboard/apps/dashboard";
var __vite_injected_original_import_meta_url = "file:///Users/lmfg/XN-SUI/roar/roar-dashboard/apps/dashboard/vite.config.js";
function getResponseHeaders() {
  const root = path.resolve(__vite_injected_original_dirname);
  const fbPath = path.join(root, "firebase", "admin", "firebase.json");
  const FirebaseConfig = JSON.parse(fs.readFileSync(fbPath, "utf-8"));
  const stagingHostingConfig = FirebaseConfig.hosting;
  if (!stagingHostingConfig) {
    console.warn("No staging configuration found in firebase.json");
    return {};
  }
  const parsedStagingResponseHeaders = stagingHostingConfig.headers[0].headers.reduce((acc, header) => {
    if (header.key === "Content-Security-Policy-Report-Only") {
      acc["Content-Security-Policy"] = header.value.replace(/report-uri\s*[^;]+;/, "").replace(/report-to\s*[^;]+/, "").trim();
    } else if (header.key !== "Report-To") {
      acc[header.key] = header.value;
    }
    return acc;
  }, {});
  return parsedStagingResponseHeaders;
}
var loadDotenvFiles = (mode) => {
  let envFilePaths = [];
  const allowOverride = !mode.includes("production") && !mode.includes("staging");
  const modeEnvFilePath = path.resolve(__vite_injected_original_dirname, `./env-configs/.env.${mode}`);
  const modeLocalEnvFileName = path.resolve(__vite_injected_original_dirname, `./env-configs/.env.${mode}.local`);
  if (fs.existsSync(modeEnvFilePath)) envFilePaths.push(modeEnvFilePath);
  if (allowOverride & fs.existsSync(modeLocalEnvFileName)) envFilePaths.push(modeLocalEnvFileName);
  config({
    path: envFilePaths,
    override: allowOverride
  });
};
var buildFirebaseConfig = (mode = "development") => {
  const allowedModes = ["test", "development", "staging", "production"];
  if (!allowedModes.includes(mode)) {
    throw new Error(`Invalid mode: ${mode}. Expected one of: ${allowedModes.join(", ")}`);
  }
  const sentryEnvModeMap = {
    test: "staging",
    development: "staging",
    staging: "staging",
    production: "production"
  };
  const sentryEnv = sentryEnvModeMap[mode];
  const __dirname2 = path.dirname(fileURLToPath(__vite_injected_original_import_meta_url));
  const root = path.resolve(__dirname2);
  const requiredEnvVars = ["VITE_FIREBASE_ADMIN_PROJECT_ID", "VITE_FIREBASE_APP_PROJECT_ID"];
  const missingEnvVars = requiredEnvVars.filter((envVar) => !process.env[envVar]);
  if (missingEnvVars.length > 0) console.error(`Missing required environment variables: ${missingEnvVars.join(", ")}`);
  const { VITE_FIREBASE_ADMIN_PROJECT_ID, VITE_FIREBASE_APP_PROJECT_ID } = process.env;
  const replaceEnvVars = (str) => {
    return str.replace(/__SENTRY_ENV__/g, sentryEnv).replace(/__ADMIN_PROJECT_ID__/g, VITE_FIREBASE_ADMIN_PROJECT_ID).replace(/__ASSESSMENT_PROJECT_ID__/g, VITE_FIREBASE_APP_PROJECT_ID);
  };
  const cspTemplatePath = path.join(root, "firebase", "admin", "csp.template.json");
  const cspTemplate = replaceEnvVars(fs.readFileSync(cspTemplatePath, "utf8"));
  const cspObj = JSON.parse(cspTemplate);
  const cspPolicy = Object.entries(cspObj).map(([dir, vals]) => `${dir} ${vals.join(" ")}`).join("; ").replace(/\s+/g, " ").trim();
  const fbTemplatePath = path.join(root, "firebase", "admin", "firebase.template.json");
  const fbTemplate = replaceEnvVars(fs.readFileSync(fbTemplatePath, "utf8"));
  const fbObj = JSON.parse(fbTemplate);
  const header = fbObj.hosting.headers.flatMap((h) => h.headers).find((h) => h.key === "Content-Security-Policy-Report-Only");
  if (!header) throw new Error("CSP header not found");
  header.value = cspPolicy;
  const outPath = path.join(root, "firebase", "admin", "firebase.json");
  fs.writeFileSync(outPath, JSON.stringify(fbObj, null, 2));
  console.log(`\u2705 Generated ${outPath} for environment ${mode}`);
};
var vite_config_default = defineConfig(({ mode }) => {
  loadDotenvFiles(mode);
  buildFirebaseConfig(mode);
  const responseHeaders = getResponseHeaders();
  return {
    plugins: [
      Vue({
        include: [/\.vue$/, /\.md$/]
      }),
      nodePolyfills({
        globals: {
          process: true
        }
      }),
      UnheadVite(),
      ...process.env.NODE_ENV !== "development" ? [
        // @TODO: Modify to use environment variables for Sentry configuration.
        sentryVitePlugin({
          org: "roar-89588e380",
          project: "dashboard"
        })
      ] : []
    ],
    resolve: {
      alias: {
        "@": fileURLToPath(new URL2("./src", __vite_injected_original_import_meta_url))
      }
    },
    server: {
      fs: {
        allow: ["../../"]
      },
      headers: {
        ...responseHeaders
      },
      https: process.env.NODE_ENV === "development" ? {
        key: fs.readFileSync(path.resolve(__vite_injected_original_dirname, "../../certs/roar-local.key")),
        cert: fs.readFileSync(path.resolve(__vite_injected_original_dirname, "../../certs/roar-local.crt"))
      } : false
    },
    preview: {
      port: 4173,
      strictPort: process.env.CI === "true" ? true : false
    },
    build: {
      cssCodeSplit: true,
      sourcemap: true,
      rollupOptions: {
        output: {
          manualChunks: {
            lodash: ["lodash"],
            tanstack: ["@tanstack/vue-query"],
            chartJs: ["chart.js"],
            sentry: ["@sentry/browser", "@sentry/integrations", "@sentry/vue", "@sentry/wasm"],
            roam: ["@bdelab/roam-apps"],
            firekit: ["@bdelab/roar-firekit"],
            letter: ["@bdelab/roar-letter"],
            multichoice: ["@bdelab/roar-multichoice"],
            phoneme: ["@bdelab/roar-pa"],
            sre: ["@bdelab/roar-sre"],
            swr: ["@bdelab/roar-swr"],
            utils: ["@bdelab/roar-utils"],
            vocab: ["@bdelab/roar-vocab"],
            ran: ["@bdelab/roav-ran"],
            crowding: ["@bdelab/roav-crowding"],
            "roav-mep": ["@bdelab/roav-mep"],
            "roar-readaloud": ["@bdelab/roar-readaloud"]
          }
        }
      }
    },
    optimizeDeps: {
      include: [
        "pagedjs",
        "@bdelab/roar-firekit",
        "vue-google-maps-community-fork",
        "fast-deep-equal"
        // Required due to https://github.com/nathanap/vue-google-maps-community-fork/issues/4
      ]
    }
  };
});

// vitest.config.js
var __vite_injected_original_import_meta_url2 = "file:///Users/lmfg/XN-SUI/roar/roar-dashboard/apps/dashboard/vitest.config.js";
var isCI = process.env.CI === "true";
var viteConfigObject = vite_config_default({ mode: process.env.NODE_ENV || "test" });
var vitest_config_default = mergeConfig(
  viteConfigObject,
  defineConfig2({
    test: {
      globals: true,
      environment: "happy-dom",
      root: fileURLToPath2(new URL("./", __vite_injected_original_import_meta_url2)),
      dir: "src/",
      watch: false,
      setupFiles: ["./vitest.setup.js"],
      clearMocks: true,
      coverage: {
        enabled: true,
        provider: "istanbul",
        include: ["src/**/*.js", "!src/**/*.test.js"],
        exclude: ["**/test-support/**", ...coverageConfigDefaults.exclude],
        all: true,
        clean: true,
        reporter: isCI ? ["json", "json-summary", "text-summary"] : ["html", "text"]
      }
    }
  })
);
export {
  vitest_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
